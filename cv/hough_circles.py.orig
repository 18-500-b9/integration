# import the necessary packages
import numpy as np
import argparse
import cv2
import sys
from datetime import datetime

<<<<<<< Updated upstream
# sys.path.append('/Users/ouchristinah/Google Drive/CMU/S19/capstone/integration')
# sys.path.append('/Users/ouchristinah/Google Drive/CMU/S19/capstone/integration/cv')
#
# from cv.average_queue import AverageQueue

DP = 1.1
MIN_DIST = 20
USING_CAMERA = True
=======
import time
import sys
sys.path.append('/Users/harryxu/Desktop/Harrys_Stuff/School/Carnegie_Mellon_Undergrad/08_Spring_2019/18500/integration')
sys.path.append('/Users/harryxu/Desktop/Harrys_Stuff/School/Carnegie_Mellon_Undergrad/08_Spring_2019/18500/integration/cv')
from cv.modules.average_queue import AverageQueue
from cv.modules.color_classification import ColorClassification

DP = 1.1
MIN_DIST = 20
>>>>>>> Stashed changes
RESIZE_FRAME_WIDTH = 800
HIGH_THRESHOLD = 50
LOW_THRESHOLD = 25
MIN_RADIUS = 7
MAX_RADIUS = 20

def main():
<<<<<<< Updated upstream
  if USING_CAMERA:
    cap = cv2.VideoCapture(0)
=======
    cap = cv2.VideoCapture(1)
>>>>>>> Stashed changes

    aggres = {}
    cc = ColorClassification(epsilon=30, threshold=4)
    # identification colors
    cc.fill_color_ranges(d={"white": (255, 255, 255),
                        "green": (15, 160, 160),
                        "purple": (40, 60, 140)})
    # display colors
    cc.fill_rgb_lookup(d={"white": (255, 255, 255),
                        "green": (0, 255, 0),
                        "purple": (128, 0, 128)})

    # pockets, usually
    ignore_regions = [((0, 0), (151, 108)), # top left
                    ((431, 0), (457, 104)), # top middle
                    ((736, 0), (900, 120)), # top right
                    ((0, 351), (154, 600)), # bottom left
                    ((428, 368), (456, 600)), # bottom middle
                    ((727, 361), (900, 600)) # bottom right
                    ]

    def run_hough_circles(image):
        output = image.copy()
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

        # detect circles in the image
        circles = cv2.HoughCircles(image=gray, method=cv2.HOUGH_GRADIENT, dp=DP, minDist=MIN_DIST, param1=HIGH_THRESHOLD,
            param2=LOW_THRESHOLD, minRadius=MIN_RADIUS, maxRadius=MAX_RADIUS)

        # ensure at least some circles were found
        if len(circles) <= 0:
            print("Can't find any circles")
            return

        # convert the (x, y) coordinates and radius of the circles to integers
        circles = np.round(circles[0, :]).astype("int")

        circles = list(circles)

        def in_range(coord):
            x, y = coord[0], coord[1]
            for ((ux, uy), (lx, ly)) in ignore_regions:
                if (ux <= x <= lx) or (uy <= y <= ly):
                    return False
            return True

        circles = list(filter(lambda x: in_range(x), circles))

        colors = []

        # debug print of all circles found
        #print(np.sort(circles, axis=0))

        # loop over the (x, y) coordinates and radius of the circles
        for (x, y, r) in circles:
            # TODO: filter out x/y's that lie outside table edges or on pockets. Requires getting table coords
            color_str = cc.determine_color(image, x, y)
            colors.append(color_str)

            if not (color_str) in aggres:
                aggres[color_str] = AverageQueue(limit=5)

            aggres[color_str].add(x, y)

            if True: # change me to stop using this average queue
                ave_x, ave_y = aggres[color_str].get_average()
                ave_x = int(ave_x)
                ave_y = int(ave_y)

                # draw the circle in the output image, then draw a rectangle
                # corresponding to the center of the circle
                # cv2.circle(output, (x, y), r, (0, 255, 0), 4)
                cv2.rectangle(output, (ave_x - 2, ave_y - 2), (ave_x + 2, ave_y + 2), (20,255,57), -1)
                # cv2.rectangle(output, (x - 1, y - 1), (x + 1, y + 1), color_val, -1)
            else:
                print("Can't find a bucket for this", x, y, color_str)
                cv2.rectangle(output, (x - 2, y - 2), (x + 2, y + 2), (255, 20, 57), -1)

        for ((x, y), (w, z)) in ignore_regions:
            cv2.rectangle(output, (x, y), (w, z), (255, 255, 255), 1)

        # show the output image
        print(circles, colors)
        cv2.imshow("output", output)
        res = cv2.waitKey(0)
        print(res)

    while True:
        ret, frame = cap.read()
        frame_height = frame.shape[0]
        frame_width = frame.shape[1]
        resize_frame_height = int(frame_height / frame_width * RESIZE_FRAME_WIDTH)
        frame = cv2.resize(frame, (RESIZE_FRAME_WIDTH, resize_frame_height))
        cv_balls = run_hough_circles(frame)

if __name__ == "__main__":
    main()
